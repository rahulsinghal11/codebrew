{
  "issue": "Inefficient recursive implementation of factorial",
  "repo_name": "codebrew",
  "file_path": "ai/bedrock_client.py",
  "file_name": "bedrock_client.py",
  "start_line": 64,
  "end_line": 68,
  "old_code": "def calculate_factorial(n):\n    if n == 0:\n        return 1\n    return n * calculate_factorial(n-1)",
  "new_code": "def calculate_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result",
  "benefit": "The iterative implementation has better time and space complexity (O(n) vs O(n) for time, O(1) vs O(n) for space). It avoids the overhead of recursive function calls and is more efficient for large inputs.",
  "commit_message": "Optimize factorial calculation with iterative implementation"
}