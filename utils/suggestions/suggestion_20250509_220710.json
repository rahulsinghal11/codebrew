{
  "issue": "Global variables used throughout the code, making it harder to reason about state and side effects",
  "repo_name": "codebrew",
  "file_path": "test_files/10_code_organization.py",
  "file_name": "10_code_organization.py",
  "start_line": 2,
  "end_line": 4,
  "old_code": "config = {}\ndata = []\nresults = []",
  "new_code": "class DataProcessor:\n    def __init__(self):\n        self.config = {'max_items': 100, 'timeout': 30}\n        self.data = []\n        self.results = []",
  "benefit": "Encapsulating state in a class improves code organization, makes it easier to reason about side effects, and enables better testability and reusability.",
  "commit_message": "Refactor global variables into class instance variables",
  "branch_name": "refactor-global-variables-into-class-2"
}